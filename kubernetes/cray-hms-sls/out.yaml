---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql-backup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cray-sls-postgresql-db-backup
  labels:
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: cray-hms-sls/templates/schema-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cray-hms-sls-schema-pvc
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: 1Gi
  storageClassName: "ceph-cephfs-external"
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql-backup.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: cray-sls-postgresql-db-backup
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql-backup.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cray-sls-postgresql-db-backup
subjects:
- kind: ServiceAccount
  name: cray-sls-postgresql-db-backup
roleRef:
  kind: Role
  name: cray-sls-postgresql-db-backup
  apiGroup: rbac.authorization.k8s.io
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
kind: Service
apiVersion: v1
metadata:
  name: "cray-sls-postgres-0"
  labels:
    cluster-name: "cray-sls"
    role: pod
spec:
  selector:
    statefulset.kubernetes.io/pod-name: "cray-sls-postgres-0"
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
kind: Service
apiVersion: v1
metadata:
  name: "cray-sls-postgres-1"
  labels:
    cluster-name: "cray-sls"
    role: pod
spec:
  selector:
    statefulset.kubernetes.io/pod-name: "cray-sls-postgres-1"
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
kind: Service
apiVersion: v1
metadata:
  name: "cray-sls-postgres-2"
  labels:
    cluster-name: "cray-sls"
    role: pod
spec:
  selector:
    statefulset.kubernetes.io/pod-name: "cray-sls-postgres-2"
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# Source: cray-hms-sls/charts/cray-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cray-sls
  labels:
    app.kubernetes.io/name: cray-sls
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    
  annotations:
    cray.io/service: cray-sls
    
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      name: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: cray-sls
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: cray-hms-sls/charts/cray-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cray-sls
  labels:
    app.kubernetes.io/name: cray-sls
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    
  annotations:
    cray.io/service: cray-sls
    
spec:
  replicas: 3
  strategy:
    
    rollingUpdate:
      maxUnavailable: 50%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: cray-sls
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cray-sls
        app.kubernetes.io/instance: RELEASE-NAME
      annotations:
        service.cray.io/public: "true"
        
    spec:
      
      serviceAccountName: "jobs-watcher"
      initContainers:
      - name: "cray-sls-wait-for-postgres"
        image: "dtr.dev.cray.com/loftsman/docker-kubectl:0.2.0"
        command: 
          - /bin/sh
          - -c
          - |
            while true; do
              JOB_CONDITION="$(kubectl get jobs -n services -l app.kubernetes.io/name=cray-sls-wait-for-postgres -o jsonpath='{.items[0].status.conditions[0].type}')"
              JOB_CONDITION_RC=$?
              if [ $JOB_CONDITION_RC -eq 0 ]; then
                if [ "$JOB_CONDITION" == 'Complete' ]; then
                  echo "Completed"
                  break
                fi
                echo "Waiting for the cray-sls-wait-for-postgres job in the services namespace to complete, current condition is $(kubectl get jobs -n services -l app.kubernetes.io/name=cray-sls-wait-for-postgres -o jsonpath='{.items[0].status}')"
                sleep 3
              elif [ $JOB_CONDITION_RC -ne 1 ]; then
                echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , failing"
                exit 1
              else
                echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , will retry"
                sleep 3
              fi
            done
        resources:
          requests:
            cpu: 30m
            memory: "20Mi"
          limits:
            cpu: 500m
            memory: "100Mi"
      containers:
      - name: cray-sls
        image: "dtr.dev.cray.com/cray/cray-sls:latest"
        imagePullPolicy: IfNotPresent
        env:
          - name: POSTGRES_HOST
            value: "cray-sls-postgres"
          - name: POSTGRES_PORT
            value: "5432"
          - name: DBUSER
            valueFrom:
              secretKeyRef:
                key: username
                name: slsuser.cray-sls-postgres.credentials
          - name: DBPASS
            valueFrom:
              secretKeyRef:
                key: password
                name: slsuser.cray-sls-postgres.credentials
          - name: SLS_MAX_DATABASE_CONNECTIONS
            value: "25"
        ports:
          - containerPort: 8376
            name: http
        livenessProbe:
          httpGet:
            path: /v1/liveness
            port: 8376
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /v1/readiness
            port: 8376
          initialDelaySeconds: 15
          periodSeconds: 30
        volumeMounts:
          - name: slsuser-postgres-secrets
            readOnly: true
            mountPath: "/secrets/postgres/slsuser"
          - name: service-account-postgres-secrets
            readOnly: true
            mountPath: "/secrets/postgres/service_account"
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
      
      
      
      
      volumes:
        - name: slsuser-postgres-secrets
          secret:
            secretName: slsuser.cray-sls-postgres.credentials
        - name: service-account-postgres-secrets
          secret:
            secretName: service-account.cray-sls-postgres.credentials
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - cray-sls
            topologyKey: kubernetes.io/hostname
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "cray-sls-wait-for-postgres-1"
  labels:
    app.kubernetes.io/name: cray-sls-wait-for-postgres
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: "postgres-watcher-sls"
          image: "dtr.dev.cray.com/cache/postgres:13.2"
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            runAsNonRoot: true
          command: ["sh", "-c", "until psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB -c 'select version();'; do echo waiting for postgres db $POSTGRES_DB; sleep 2; done;  echo 'POSTGRES_READY';"]
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: slsuser.cray-sls-postgres.credentials
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: slsuser.cray-sls-postgres.credentials
                key: password
          - name: POSTGRES_HOST
            value: "cray-sls-postgres"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: "sls"
          resources:
            requests:
              cpu: 100m
              memory: "10Mi"
            limits:
              cpu: 500m
              memory: "1Gi"
        - name: "postgres-watcher-service-db"
          image: "dtr.dev.cray.com/cache/postgres:13.2"
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            runAsNonRoot: true
          command: ["sh", "-c", "until psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB -c 'select version();'; do echo waiting for postgres db $POSTGRES_DB; sleep 2; done;  echo 'POSTGRES_READY';"]
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: service-account.cray-sls-postgres.credentials
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: service-account.cray-sls-postgres.credentials
                key: password
          - name: POSTGRES_HOST
            value: "cray-sls-postgres"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: "service_db"
          resources:
            requests:
              cpu: 100m
              memory: "10Mi"
            limits:
              cpu: 500m
              memory: "1Gi"
---
# Source: cray-hms-sls/templates/jobs.yaml
apiVersion: batch/v1
kind:       Job
metadata:
  name: cray-sls-init-load
  labels:
    app: cray-sls-init-load
spec:
  template:
    metadata:
      labels:
        app: cray-sls-init-load
    spec:
      restartPolicy:      OnFailure
      serviceAccountName: "jobs-watcher"
      initContainers:
        - name: cray-sls-init
          image: dtr.dev.cray.com/cray/cray-sls:latest
          command: ["/entrypoint.sh"]
          args: ["sls-init"]
          env:
            - name: POSTGRES_HOST
              value: "cray-sls-postgres"
            - name: DBUSER
              valueFrom:
                secretKeyRef:
                  name: "slsuser.cray-sls-postgres.credentials"
                  key:  "username"
            - name: DBPASS
              valueFrom:
                secretKeyRef:
                  name: "slsuser.cray-sls-postgres.credentials"
                  key:  "password"
            - name: SCHEMA_VERSION
              value: "3"
          volumeMounts:
            - mountPath: "/persistent_migrations"
              name: schema
      containers:
        - name: cray-sls-loader
          env:
            - name: SLS_FILE_PATH
              value: "/sls/sls_input_file.json"
            - name: SLS_URL
              value: "http://cray-sls"
            - name: SLS_LOADER_FORCE_UPLOAD
              value: "false"
            - name: SLS_LOADER_CHECK_S3_MARKER
              value: "true"
            - name: SLS_LOADER_CHECK_SLS_CONTENTS
              value: "false"
            - name: S3_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: sls-s3-credentials
                  key: s3_endpoint
            - name: S3_BUCKET
              value: sls
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: sls-s3-credentials
                  key: access_key
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: sls-s3-credentials
                  key: secret_key
            - name: MAX_PING_BUCKET_ATTEMPTS
              value: "30"            
            - name: USE_S3_DNS_HACK
              value: "true"
            - name: S3_DNS_LOOKUP_ATTEMPTS
              value: "30"
            - name: PIT_NAMESERVER
              valueFrom:
                configMapKeyRef:
                  name: cray-sls-init-loader-nameserver
                  key: nameserver
          image: dtr.dev.cray.com/cray/cray-sls:latest
          command: ["/entrypoint.sh"]
          args: ["sls-loader"]
      volumes:
        - name: schema
          persistentVolumeClaim:
            claimName: cray-hms-sls-schema-pvc
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql-backup.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cray-sls-postgresql-db-backup
  labels:
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    
spec:
  schedule: "10 23 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          serviceAccountName: cray-sls-postgresql-db-backup
          securityContext:
            {}
          containers:
            - name: postgresql-backup
              securityContext:
                {}
              image: "dtr.dev.cray.com/cray/cray-postgres-db-backup:0.1.0"
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 1000m
                  memory: 500Mi
                requests:
                  cpu: 100m
                  memory: 200Mi
              env:
              - name: DB_NAME
                value: "cray-sls-postgres"
              - name: USERS
                value: "[\"service_account\",\"slsuser\"]"
              - name: NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: PGHOST
                value: "cray-sls-postgres"
              - name: PGPORT
                value: "5432"
              - name: PGDATABASE
                value: sls
              - name: PGUSER
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: "postgres.cray-sls-postgres.credentials"
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "postgres.cray-sls-postgres.credentials"
              - name: STORAGE_ENDPOINT
                valueFrom:
                  secretKeyRef:
                    name: postgres-backup-s3-credentials
                    key: s3_endpoint
              - name: STORAGE_TLS_VERIFY
                valueFrom:
                  secretKeyRef:
                    name: postgres-backup-s3-credentials
                    key: ssl_validate
              - name: STORAGE_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: postgres-backup-s3-credentials
                    key: access_key
              - name: STORAGE_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: postgres-backup-s3-credentials
                    key: secret_key
              - name: STORAGE_BUCKET
                value: postgres-backup
          restartPolicy: Never
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: "cray-sls-postgres-tls"
spec:
  secretName: "cray-sls-postgres-tls"
  duration: 720h
  renewBefore: 24h
  organization:
    - Cray
  commonName: "cray-sls-postgres.default.cluster.svc"
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
    - server auth
    - client auth
  dnsNames:
    - "cray-sls-postgres.default.cluster.svc"
    - "cray-sls-postgres.default"
    - "*.cray-sls-postgres.default"
  issuerRef:
    name: "cert-manager-issuer-common"
    kind: Issuer
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "cray-sls-postgres-pods"
spec:
  selector:
    matchLabels:
      cluster-name: "cray-sls"
      role: pod
  portLevelMtls:
    5432:
      mode: PERMISSIVE
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "cray-sls-postgres"
spec:
  selector:
    matchLabels:
      application: spilo
      cluster-name: "cray-sls-postgres"
      team: "cray-sls"
  portLevelMtls:
    5432:
      mode: PERMISSIVE
---
# Source: cray-hms-sls/charts/cray-service/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: "cray-sls"
  labels:
    app.kubernetes.io/name: cray-sls
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    
spec:
  hosts:
    - "*"
  gateways:
    - services-gateway
    - customer-admin-gateway
  http:
    - match:
        - uri:
            prefix: "/apis/sls/"
      rewrite:
        uri: "/"
      route:
        - destination:
            host: "cray-sls"
            port:
              number: 80
---
# Source: cray-hms-sls/charts/cray-service/templates/postgresql.yaml
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: "cray-sls-postgres"
  labels:
    app.kubernetes.io/name: cray-sls-postgres
    helm.sh/base-chart: cray-service-6.0.0
    helm.sh/chart: unknown-chart-name-unknown-chart-version
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    
spec:
  teamId: "cray-sls"
  volume:
    size: 1Gi
  numberOfInstances: 3
  users:
    service_account: []
    slsuser: []
  databases:
    service_db: service_account
    sls: slsuser

  postgresql:
    version: "11"

  tls:
    secretName: "cray-sls-postgres-tls"
---
# Source: cray-hms-sls/templates/hook-serviceaccout.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cray-hms-sls
  namespace: services
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-5"
---
# Source: cray-hms-sls/templates/hook-serviceaccout.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cray-hms-sls
  namespace: services
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-5"
rules:
- apiGroups: ["batch", ""]
  resources: ["jobs", "pods", "configmaps"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
---
# Source: cray-hms-sls/templates/hook-serviceaccout.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cray-hms-sls
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cray-hms-sls
subjects:
  - kind: ServiceAccount
    name: cray-hms-sls
    namespace: services
---
# Source: cray-hms-sls/templates/jobs.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cray-sls-init-load-nameserver-getter
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: “false”
    spec:
      restartPolicy: OnFailure
      serviceAccountName: "cray-hms-sls"
      containers:
        - name: nameserver-getter
          image: "dtr.dev.cray.com/loftsman/docker-kubectl:0.2.0"
          command:
          - /bin/sh
          - -c
          - set -exu;
            sed -n '/nameserver/p' /host/resolv.conf > /tmp/nameserver;
            echo "The following nameserver(s) was found from the hosts resolve.conf";
            cat /tmp/nameserver;
            kubectl -n services create configmap cray-sls-init-loader-nameserver --from-file=/tmp/nameserver
            --dry-run -o yaml | kubectl apply -f -
          volumeMounts:
          - mountPath: /host/resolv.conf
            name: resolv-dir
            subPath: resolv.conf
            readOnly: true
      volumes:
      # On the NCNs the file /etc/resolv.conf is a a symlink to /run/netconfig/resolv.conf
      # This is true on both vshasta & baremetal, and k8s hostPath did not work with the symlink
      - hostPath:
          path: "/etc/"
        name: resolv-dir
---
# Source: cray-hms-sls/templates/jobs.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cray-sls-init-load-deleter
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: “false”
    spec:
      restartPolicy: OnFailure
      serviceAccountName: "cray-hms-sls"
      containers:
        - name: job-deleter
          image: "dtr.dev.cray.com/loftsman/docker-kubectl:0.2.0"
          command:
          - /bin/sh
          - -c
          - set -x;
            echo "Deleting Jobs";
            kubectl -n services delete job cray-sls-init-load;
            while [ "`kubectl -n services get pods -l app=cray-sls-init-load -o jsonpath='{.items}'`" != "[]" ];
            do
              echo "Waiting for previous job to be removed entirely...";
              sleep 1;
            done;
            echo "Old job deleted.";
            exit 0
